package com.sandeepreddy.tournament.db;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.JoinEntity;
import org.greenrobot.greendao.annotation.NotNull;
import org.greenrobot.greendao.annotation.ToMany;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "MASTER_TOURNAMENT".
 */
@Entity(active = true)
public class Game {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String name;
    private String color;

    @ToMany
    @JoinEntity(
            entity = GameUserMapping.class,
            sourceProperty = "gameId",
            targetProperty = "userId"
    )
    private List<User> userList;

    @ToMany
    @JoinEntity(
            entity = GameTournamentMapping.class,
            sourceProperty = "gameId",
            targetProperty = "tournamentId"
    )
    private List<Tournament> tournamentList;

/** Used to resolve relations */
@Generated(hash = 2040040024)
private transient DaoSession daoSession;

/** Used for active entity operations. */
@Generated(hash = 359416843)
private transient GameDao myDao;

@Generated(hash = 576744351)
public Game(Long id, @NotNull String name, String color) {
    this.id = id;
    this.name = name;
    this.color = color;
}

@Generated(hash = 380959371)
public Game() {
}

public Long getId() {
    return this.id;
}

public void setId(Long id) {
    this.id = id;
}

public String getName() {
    return this.name;
}

public void setName(String name) {
    this.name = name;
}

public String getColor() {
    return this.color;
}

public void setColor(String color) {
    this.color = color;
}
    
/** Resets a to-many relationship, making the next get call to query for a fresh result. */
@Generated(hash = 1517531020)
public synchronized void resetUserList() {
    userList = null;
}

/**
 * To-many relationship, resolved on first access (and after reset).
 * Changes to to-many relations are not persisted, make changes to the target entity.
 */
@Generated(hash = 1630761247)
public List<Tournament> getTournamentList() {
    if (tournamentList == null) {
        final DaoSession daoSession = this.daoSession;
        if (daoSession == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        TournamentDao targetDao = daoSession.getTournamentDao();
        List<Tournament> tournamentListNew = targetDao
                ._queryGame_TournamentList(id);
        synchronized (this) {
            if (tournamentList == null) {
                tournamentList = tournamentListNew;
            }
        }
    }
    return tournamentList;
}

/** Resets a to-many relationship, making the next get call to query for a fresh result. */
@Generated(hash = 1267102543)
public synchronized void resetTournamentList() {
    tournamentList = null;
}

/**
 * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
 * Entity must attached to an entity context.
 */
@Generated(hash = 128553479)
public void delete() {
    if (myDao == null) {
        throw new DaoException("Entity is detached from DAO context");
    }
    myDao.delete(this);
}

/**
 * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
 * Entity must attached to an entity context.
 */
@Generated(hash = 1942392019)
public void refresh() {
    if (myDao == null) {
        throw new DaoException("Entity is detached from DAO context");
    }
    myDao.refresh(this);
}

/**
 * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
 * Entity must attached to an entity context.
 */
@Generated(hash = 713229351)
public void update() {
    if (myDao == null) {
        throw new DaoException("Entity is detached from DAO context");
    }
    myDao.update(this);
}

/**
 * To-many relationship, resolved on first access (and after reset).
 * Changes to to-many relations are not persisted, make changes to the target entity.
 */
@Generated(hash = 246459481)
public List<User> getUserList() {
    if (userList == null) {
        final DaoSession daoSession = this.daoSession;
        if (daoSession == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        UserDao targetDao = daoSession.getUserDao();
        List<User> userListNew = targetDao._queryGame_UserList(id);
        synchronized (this) {
            if (userList == null) {
                userList = userListNew;
            }
        }
    }
    return userList;
}

/** called by internal mechanisms, do not call yourself. */
@Generated(hash = 733596598)
public void __setDaoSession(DaoSession daoSession) {
    this.daoSession = daoSession;
    myDao = daoSession != null ? daoSession.getGameDao() : null;
}

}
